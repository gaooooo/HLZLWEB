#!/usr/bin/env node

import '../server/inits/initGlobal';
import { app } from '../app';
import http from 'http';
import deb from 'debug';
const debug = deb('server');
//初始化全局变量
const config = global.APP_CONFIG;
const starter = {
    app,
    server: app.server,
    port: process.env.PORT || config.port,
    run() {
        this.app.on('error', this.onError);
        this.app.on('listening', this.onListening);
        //  这种模式可以使用https 
        // let server = http.createServer(app.callback());
        // server.listen(port);
        // server.on('error', onError);
        // server.on('listening', onListening);  
        //app.listen   可以取消上面的代码 同时监听两个端口!!!
        app.listen(this.port);
        console.log('启动端口 http://localhost:' + this.port);
    },
    onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
        let bind = typeof port === 'string' ?
            'Pipe ' + port :
            'Port ' + port;
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    },
    onListening() {
        let addr = this.server.address();
        let bind = typeof addr === 'string' ?
            'pipe ' + addr :
            'port ' + addr.port;
        debug('Listening on ' + bind);
    }
};
starter.run();

//遇到EPIPE错误导致程序崩溃的时候 顺利关闭程序
process.stdout.on('error', function(err) {
    if (err.code == "EPIPE") {
        process.exit(0);
    }
});